language ESSENCE' 1.0

given J : int
given H : int
given R : int
given N : int
given Mmax: int

$ Miền chỉ số
letting Jobs  be domain int(1..J)
letting Times be domain int(0..H)
letting Modes be domain int(1..Mmax)

given nModes : matrix indexed by [Jobs] of int(1..Mmax)
given validU : matrix indexed by [Jobs, Times, Modes] of int(0..1)
given reqRen : matrix indexed by [Jobs, Modes, int(1..R)] of int(0..)
given reqNon : matrix indexed by [Jobs, Modes, int(1..N)] of int(0..)
given capRen : matrix indexed by [int(1..R)] of int(0..)
given capNon : matrix indexed by [int(1..N)] of int(0..)

find U  : matrix indexed by [Jobs, Times, Modes] of bool
find SM : matrix indexed by [Jobs, Modes] of bool

such that

$ 1) Tắt mode vượt nModes
forAll j : Jobs . forAll m : Modes .
    (m > nModes[j] -> !SM[j,m]),

$ 2) EO: mỗi job đúng 1 mode
forAll j : Jobs .
    (sum m : Modes . toInt(SM[j,m])) = 1,

$ 3) Tắt U không hợp lệ
forAll j : Jobs . forAll t : Times . forAll m : Modes .
    (validU[j,t,m] = 0 -> !U[j,t,m]),

$ 4) Ràng buộc tài nguyên renewable theo từng (k,t)
forAll k : int(1..R) . forAll t : Times .
    (sum j : Jobs . sum m : Modes .
        reqRen[j,m,k] * toInt(U[j,t,m])
    ) <= capRen[k],

$ 5) Ràng buộc tài nguyên non-renewable theo từng k
forAll k : int(1..N) .
    (sum j : Jobs . sum m : Modes .
        reqNon[j,m,k] * toInt(SM[j,m])
    ) <= capNon[k]